[code_contests_prompt_reflect]
temperature = 0.2
system= """\
The self-reflection must cover every aspect of the problem. Pay attention to small details and nuances in the problem description.
"""
user="""You are given a code contest problem:

problem name: '{{name}}'


problem description:
=====
{{description|trim}}
=====


Given the code contest problem, you have two tasks:
1) Reflect on the problem, and describe it in your own words, in bullet points. Pay attention to small details, nuances, notes and examples in the problem description.
2) Explain how each provided example is in the correct format and matches your understanding of the problem. If it shows an edge/special case, explain it. Do NOT try to verify the output (in total {{ actual_number_of_tests }} examples are provided).
Read carefully the problem description. Make sure the example explanations are consistent with them, and between themselves.
Be as specific as possible.

The output must be a YAML object equivalent to type $ProblemReflection, according to the following Pydantic definitions:
=====
Class InputOutput(BaseModel):
    input: str
    output: str
    explanation: str = Field(description="Short explanation why the examples are in correct format.")


class ProblemReflection(BaseModel):
    self_reflection: str = Field(description="Describe the problem in your own words, in bullet points. Address the problem goals, inputs, outputs, rules, constraints, and other relevant details.")
    tests_explanations: list[InputOutput] = Field(max_items={{ actual_number_of_tests }}, description="List of explanations for each test case")
=====

Example YAML output:
```yaml
self_reflection:
- |
  ...
- |
  ...
tests_explanations:
- input: |
    ...
  output: |
    ..
  explanation: |
    ...
...
 ```

Each YAML output MUST be after a newline, indented, with block scalar indicator ('|').

Answer:
```yaml
"""
